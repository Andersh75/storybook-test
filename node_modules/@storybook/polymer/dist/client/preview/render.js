'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _taggedTemplateLiteral2 = require('babel-runtime/helpers/taggedTemplateLiteral');

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _templateObject = (0, _taggedTemplateLiteral3.default)(['\n        Did you forget to return the Polymer component from the story?\n        Use "() => \'&lt;your-component-name&gt;&lt;/your-component-name&gt;\'" when defining the story.\n      '], ['\n        Did you forget to return the Polymer component from the story?\n        Use "() => \'&lt;your-component-name&gt;&lt;/your-component-name\\&gt;\'" when defining the story.\n      ']);

exports.renderError = renderError;
exports.renderException = renderException;
exports.renderMain = renderMain;
exports.default = renderPreview;

var _global = require('global');

var _commonTags = require('common-tags');

var _clientLogger = require('@storybook/client-logger');

var _nopreview = require('./nopreview');

var _errorpreview = require('./errorpreview');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var previousKind = '';
var previousStory = '';

var rootElement = _global.document.getElementById('root');

function renderError(error) {
  rootElement.innerHTML = (0, _errorpreview.errorpreview)(error.message, error.stack);
}

function renderException(error) {
  renderError(error);
  _clientLogger.logger.error(error.stack);
}

function renderMain(data, storyStore) {
  if (storyStore.size() === 0) return;
  var selectedKind = data.selectedKind,
      selectedStory = data.selectedStory;

  var story = storyStore.getStory(selectedKind, selectedStory);

  if (selectedKind !== previousKind || previousStory !== selectedStory) {
    previousKind = selectedKind;
    previousStory = selectedStory;
  } else {
    return;
  }
  var context = {
    kind: selectedKind,
    story: selectedStory
  };
  var component = story ? story(context) : _nopreview.nopreview;

  if (!component) {
    renderError({
      message: 'Expecting a Polymer component from the story: "' + selectedStory + '" of "' + selectedKind + '".',
      stack: (0, _commonTags.stripIndents)(_templateObject)
    });
    return;
  }
  if (typeof component === 'string') {
    rootElement.innerHTML = component;
  } else {
    rootElement.innerHTML = '';
    rootElement.appendChild(component);
  }
}

function renderPreview(_ref) {
  var reduxStore = _ref.reduxStore,
      storyStore = _ref.storyStore;

  var state = reduxStore.getState();
  if (state.error) {
    return renderException(state.error);
  }
  try {
    return renderMain(state, storyStore);
  } catch (ex) {
    return renderException(ex);
  }
}